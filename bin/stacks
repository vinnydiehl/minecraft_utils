#!/usr/bin/ruby

require "optparse"

ARGV.push "-h" if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: stacks [options] AMOUNT [STACK SIZE=64]"

  opts.on("-d", "--dye",
          "prints amount of dye needed for stained glass or concrete") do |o|
    options[:dye] = o
  end
end.parse!

unless ARGV[0].match? /^\d+$/
  puts "Amount must be a number!"
  exit 1
end

unless ARGV[1].nil? or ARGV[1].match? /^\d+$/
  puts "Stack size must be a number!"
  exit 1
end

# Returns an array [stacks, blocks]
def calc_stacks(n, stack_size=64)
  [stacks = (n / stack_size).floor, n - (stacks * stack_size)]
end

# Get proper pluralization
#
#   pluralize 1, "stack" #=> "1 stack"
#   pluralize 3, "stack" #=> "3 stacks"
def pluralize(n, str)
  "#{n} #{str + (n == 1 ? "" : "s")}"
end

# Create an intelligent output, i.e. don't print something like "0 blocks"
def get_output(stacks, blocks, put_shulkers=false)
  s = ""
  put_stacks, put_blocks = stacks.nonzero?, blocks.nonzero?

  if put_shulkers
    s += pluralize boxes = (stacks / 27).floor, "shulker"

    # Strip the necessary # of stacks off the count.
    stacks -= boxes * 27
    put_stacks = stacks.nonzero?

    s += ", " if put_stacks or put_blocks
  end

  if put_stacks
    s += pluralize stacks, "stack"
    s += ", " if put_blocks
  end

  s += pluralize blocks, "block" if put_blocks

  s
end

exit 0 if (amount = ARGV[0].to_i).zero?
stacks, blocks = calc_stacks(amount, ARGV[1].nil? ? 64 : ARGV[1].to_i)

puts get_output stacks, blocks
puts get_output stacks, blocks, true if stacks >= 27

if options[:dye]
  dye = (amount / 8.0).ceil
  print "Dye needed: #{dye}"

  if dye > 64
    stacks, blocks = calc_stacks dye
    print " (#{get_output stacks, blocks, stacks >= 27})"
  end

  puts
end
